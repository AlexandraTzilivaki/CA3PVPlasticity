//Initialize NEURON
load_file("nrngui.hoc")  
v_init=-68        //for interneuron

//-----Objects for record data
objref cv
cv=new CVode()
cvode.active(0)     
tstop=2000 //2000//500
steps_per_ms=10
dt=1/steps_per_ms
n=int(tstop/dt)

objref all_msec
all_msec = new Vector(n,0)
for q=0,n-1 {all_msec.x[q]=q*dt}
//print n
//print all_msec

xopen("PVCompartmental.hoc")
print "1. PV Cell ok"
xopen("simplepyr.hoc") // template CA3 Pyr based on Hummos et al., 2014
print "2. Pyr Cells ok"

 
numberpyrs=20
numberpvs=2
ncell=numberpyrs+numberpvs

objref PyramidalCells[numberpyrs], PVCells[numberpvs], PyramidalList, PVList, ranlist

PyramidalList=new List()
PVList=new List()
ranlist=new List()

for i=0,numberpyrs-1{
PyramidalCells[i]= new PyramidalCell()
PyramidalList.append(PyramidalCells[i])


}

for ii=0, numberpvs-1{
PVCells[ii]= new FScell()
PVList.append(PVCells[ii])
}

proc setpositionsPVs(){ local lala,x,y,z
for lala=0,numberpvs-1 {
x=420+30*lala//1+20*lala
y=0//1+15*lala
z=1+0.00005*lala
PVList.o(lala).position(x,y,z)
}
}
setpositionsPVs()



proc setpositionsPyrs(){ local l,x,y,z
for l=0, numberpyrs-1{
x=0+20*l//-400+40*l
y=0 
z=3
PyramidalList.o(l).position(x,y,z)
}
}
setpositionsPyrs()

print"4. Pyrs position ok"

Ex =410//-30

Ey= 15//15

Ez =12//12


{load_file("LFP.hoc")}  // load the GUI and standard run libraries

objref Ipulse3L, RandNetStimL, NetConL, pulse_, netstim_, netcon_
Ipulse3L = new List()
RandNetStimL = new List()
NetConL = new List()

for i=0, numberpyrs-1{
 PyramidalList.o(i).soma{
    pulse_ = new Ipulse3(0.5)  //den allazei kati
    pulse_.dur = 1  //to amplitude ephreazei
    pulse_.amp = 0.09//0.06
    netstim_ = new NetStim()
    netstim_.interval = 20
    netstim_.number = 100 // essentially unlimited
    netstim_.start = 100
    netstim_.noise = 1 // 0 for deterministic, 1 for negexp
    netstim_.seed(i+1)
    netcon_ = new NetCon(netstim_,pulse_)
    netcon_.threshold = 0
    netcon_.weight = 1 //edw mporei na mpei ena seed!
    netcon_.delay = 0
    Ipulse3L.append(pulse_)
    RandNetStimL.append(netstim_)
    NetConL.append(netcon_)

}
}
    

objref Ipulse3Lp, RandNetStimLp, NetConLp, pulsep_, netstimp_, netconp_
Ipulse3Lp = new List()
RandNetStimLp = new List()
NetConLp = new List()

for ii=0, numberpvs-1{
 PVList.o(ii).soma{
    pulsep_ = new Ipulse3(0.5)  //den allazei kati
    pulsep_.dur = 1  //to amplitude ephreazei
    pulsep_.amp = 0.1//0.06
    netstimp_ = new NetStim()
    netstimp_.interval = 10
    netstimp_.number = 100 // essentially unlimited
    netstimp_.start = 100
    netstimp_.noise = 1 // 0 for deterministic, 1 for negexp
    netstimp_.seed(i+1)
    netconp_ = new NetCon(netstimp_,pulsep_)
    netconp_.threshold = 0
    netconp_.weight = 1 //edw mporei na mpei ena seed!
    netconp_.delay = 0
    Ipulse3Lp.append(pulsep_)
    RandNetStimL.append(netstimp_)
    NetConLp.append(netconp_)

}
}













xopen("../bash_templates/basic-graphics.hoc") 

for j=0, (numberpyrs-1) {addgraph("PyramidalList.o(j).soma.v(0.5)",-90,50)} //Pyr
addgraph("vrec",-0.1,0.1)
addgraph("PVList.o(0).soma.v(0.5)",-90,50) // PV

// Autapse PV-PV
PV2PVmaxsyn=12  
objref gabaain[PV2PVmaxsyn], congabaain[PV2PVmaxsyn]
proc self_inhibition() {local delstimpv localobj fpvpv

	fpvpv = new Random(100)
	delstimpv=fpvpv.normal(0.6,0.2)
	for kapa=0,numberpvs-1{
	for a=0, (PV2PVmaxsyn-1) {
		PVList.o(kapa).soma {gabaain[a]=new GABAain(0.5) }
		delstimpv = fpvpv.repick()
		if (delstimpv<0) {delstimpv=delstimpv*(-1)}
		congabaain[0]= new NetCon(&v(1), gabaain[0], -20, delstimpv, 5.1e-4*14)
	}
	}
}
self_inhibition()


proxzero = 0
forsec PVList.o(0).basal_prox {          //ctpr= basal prox
	proxzero = proxzero +1
	}
distzero= 0

forsec PVList.o(0).basal_dist {  //ctrd= basal dist
	distzero = distzero +1
	}

number_dendszero = proxzero + distzero









print" ANTWNH AGAPH MOU ELA PARE ME!"
////////////////////////////////RECORD&SAVE//////////////////////////////////////////////////////
objref vsoma[numberpyrs], somaref[numberpyrs], vinsoma[numberpvs], insomaref[numberpvs]

strdef data_dir, tempstr
sprint(data_dir,"PyrFinal")
sprint(tempstr,"mkdir -p %s", data_dir)
system(tempstr)

proc record(){
for cnpv=0,numberpvs-1{
vinsoma[cnpv]=new Vector()
vinsoma[cnpv].record(&PVList.o(cnpv).soma.v(0.5))   
}

for cn=0,numberpyrs-1{
vsoma[cn]=new Vector()
vsoma[cn].record(&PyramidalList.o(cn).soma.v(0.5))
}
}
objref fo
strdef fno
proc save(){
for cn=0,numberpyrs-1{
sprint(tempstr, "%s/pyrsoma_%d_trial_%d.dat", data_dir, cn,$1)
somaref[cn]= new File()
somaref[cn].wopen(tempstr)
vsoma[cn].printf(somaref[cn],"%g\n")
somaref[cn].close()
}

for cnpv=0,numberpvs-1{
sprint(tempstr, "%s/pvsoma_%d_trial_%d.dat", data_dir, cnpv,$1)
insomaref[cnpv] = new File()
insomaref[cnpv].wopen(tempstr)
vinsoma[cnpv].printf(insomaref[cnpv],"%g\n")
insomaref[cnpv].close()
}



//ALEKA SAVE LFP
sprint(tempstr,"%s/lfp_trial_%d.dat", data_dir,$1)
fo=new File()
fo.wopen(tempstr)
Vrec.printf(fo,"%g\n")
fo.close()
}

xopen("vecstimPyr.hoc")
call_vecstimpyr()

xopen("playnetwork.hoc")
ntrials=12
for runs=0, ntrials-1{
connect_pyr(runs)

connect_pvpyr(runs)

connect_pyrpv(runs)
connect_pvpv(runs)
record()

run()
save(runs)
}


print "ALLES KLAR!!"

